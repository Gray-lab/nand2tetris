# Jack Grammar (^element indicates elements that need to be explicitly tagged in XML output)
# =====================================================================================================================================================
# Lexical elements (tokens from tokenizer)
#   keyword
#   symbol
#   integerConstant
#   stringConstant
#   identifier
# -----------------------------------------------------------------------------------------------------------------------------------------------------
# Program structure
#  ^class (C):              'class' className '{' classVarDec* subroutineDec* '}'
#  ^classVarDec (CVD):      ('static'|'field') type varName(',' varName)* ';'
#   type (TY):               'int' | 'char' | 'boolean' className
#  ^subroutineDec (SD):     ('constructor'|'function'|'method') ('void'|type) subroutineName '('parameterList')' subroutineBody
#  ^parameterList (PL):     ((type varName)) (',' type varName)*?
#  ^subroutineBody (SB):    '{'varDec* statements'}'
#  ^varDec (VD):            'var' type varName(',' varName)* ';'
#   className (cn):         identifier
#   subroutineName (sn):    identifier
#   varName (vn):           identifier
# -----------------------------------------------------------------------------------------------------------------------------------------------------
# Statements
#  ^statements (SS):       statement*
#   statement (S):         letStatement | ifStatement | whileStatement | doStatement | returnStatement    **handle in compileStatements
#  ^letStatement (LS):     'let' varName ('['expression']')? '=' expression ';'
#  ^ifStatement (IS):      'if' '('expression')' '{'statements'}'('else' '{'statements'}')?
#  ^whileStatement (WS):   'while' '('expression')' '{'statements'}'
#  ^returnStatement (RS):  'return' expression? ';'
#  ^doStatement (DS):      'do' subroutineCall ';'                                                        **recommended to parse this as 'do' expression ';'
# -----------------------------------------------------------------------------------------------------------------------------------------------------
# Expressions
#  ^expression (E):        term (op term)*
#  ^term (TR):             integerConstant|stringConstant|keywordConstant|varName|varName'['expression']'|'('expression')'|(unaryOp term)|subroutineCall
#   subroutineCall (SC):   subroutineName'('expressionList')'|(className|varName)'.'subroutineName'('expressionList')'    **handle in compileTerm
#  ^expressionList (EL):   (expression(',' expression)*)?
#   op (op):               '+' | '-' | '*' | '/' | '&' | '|' | '<' | '>' | '='
#   unaryOp (uop):          '-' | '~'
#   keywordConstant (kc):  'true' | 'false' | 'null' | 'this'
# =====================================================================================================================================================
