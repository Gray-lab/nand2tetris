// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	// A-register and input select
	Mux16(a=instruction[0..15], b=ALUout, sel=instruction[15], out=toA);
	ARegister(in=toA, load=Aload, out=Areg, out[0..14]=addressM[0..14]);
	
	// A-load logic
	Not(in=instruction[15], out=Ainst);
	Or(a=Ainst, b=instruction[5], out=Aload);
	
	// ALU Y input select
	Mux16(a=Areg, b=inM[0..15], sel=instruction[12], out=AMsel);
	
	// D register
	And(a=instruction[4], b=instruction[15], out=Dload);
	DRegister(in=ALUout, load=Dload, out=Dreg);
	
	// ALU
    ALU(x=Dreg, y=AMsel, 
	    zx=instruction[11], 
		nx=instruction[10], 
		zy=instruction[9], 
		ny=instruction[8], 
		f=instruction[7], 
		no=instruction[6],
		out=outM[0..15],
		out=ALUout, zr=zr, ng=ng);
	
	// PC
	Not(in=reset, out=notreset);
	PC(in=Areg, load=PCload, inc=notreset, reset=reset, out[0..14]=pc[0..14]);
	
	// JMP logic
	Not(in=ng, out=notng);
	// LE
	Or(a=ng, b=zr, out=le);
	// NE
	Not(in=zr, out=ne);
	// GE
	Or(a=zr, b=notng, out=ge);
	// GT
	Or(a=ng, b=zr, out=notgt);
	Not(in=notgt, out=gt);
	// 8WayMux
	Mux(b=true, a=le, sel=instruction[0], out=muxa);
	Mux(b=ne, a=ng, sel=instruction[0], out=muxb);
	Mux(b=ge, a=zr, sel=instruction[0], out=muxc);
	Mux(b=gt, a=false, sel=instruction[0], out=muxd);
	Mux(a=muxb, b=muxa, sel=instruction[1], out=muxe);
	Mux(a=muxd, b=muxc, sel=instruction[1], out=muxf);
	Mux(a=muxf, b=muxe, sel=instruction[2], out=JMP);
	And(a=JMP, b=instruction[15], out=PCload);
	
	// WriteM
	And(a=instruction[3], b=instruction[15], out=writeM);


}