function Ball.new 0
push constant 1 //pass num_fields to Memory.alloc for allocation in heap
call Memory.alloc 1
pop pointer 0 //Set 'this' to object base address
push argument 0 //value of Ax
pop this 0 //bind topmost stack value to x
push argument 1 //value of Ay
pop this 1 //bind topmost stack value to y
push argument 2 //value of AleftWall
pop this 10 //bind topmost stack value to leftWall
push argument 3 //value of ArightWall
push constant 6 
sub
pop this 11 //bind topmost stack value to rightWall
push argument 4 //value of AtopWall
pop this 12 //bind topmost stack value to topWall
push argument 5 //value of AbottomWall
push constant 6 
sub
pop this 13 //bind topmost stack value to bottomWall
push constant 0 
pop this 14 //bind topmost stack value to wall
call Ball.show 0
pop temp 0 //remove return value from stack after do statement
push pointer 0 //'this'
return
push pointer 0 
function Ball.dispose 1
push argument 0 //arg 0 holds the pointer to the object
pop pointer 0 
push pointer 0 //'this'
call Memory.deAlloc 1
pop temp 0 //remove return value from stack after do statement
return
push constant 0 
function Ball.show 1
push argument 0 //arg 0 holds the pointer to the object
pop pointer 0 
push constant 1 
neg //'true'
call Screen.setColor 1
pop temp 0 //remove return value from stack after do statement
call Ball.draw 0
pop temp 0 //remove return value from stack after do statement
return
push constant 0 
function Ball.hide 1
push argument 0 //arg 0 holds the pointer to the object
pop pointer 0 
push constant 0 //'null' or 'false'
call Screen.setColor 1
pop temp 0 //remove return value from stack after do statement
call Ball.draw 0
pop temp 0 //remove return value from stack after do statement
return
push constant 0 
function Ball.draw 1
push argument 0 //arg 0 holds the pointer to the object
pop pointer 0 
push this 0 //value of x
push this 1 //value of y
push this 0 //value of x
push constant 5 
add
push this 1 //value of y
push constant 5 
add
call Screen.drawRectangle 4
pop temp 0 //remove return value from stack after do statement
return
push constant 0 
function Ball.getLeft 1
push argument 0 //arg 0 holds the pointer to the object
pop pointer 0 
push this 0 //value of x
return
function Ball.getRight 1
push argument 0 //arg 0 holds the pointer to the object
pop pointer 0 
push this 0 //value of x
push constant 5 
add
return
function Ball.setDestination 4
push argument 0 //arg 0 holds the pointer to the object
pop pointer 0 
push argument 1 //value of destx
push this 0 //value of x
sub
pop this 2 //bind topmost stack value to lengthx
push argument 2 //value of desty
push this 1 //value of y
sub
pop this 3 //bind topmost stack value to lengthy
push this 2 //value of lengthx
call Math.abs 1
pop local 0 //bind topmost stack value to dx
push this 3 //value of lengthy
call Math.abs 1
pop local 1 //bind topmost stack value to dy
push local 0 //value of dx
push local 1 //value of dy
lt
pop this 7 //bind topmost stack value to invert
push this 7 //value of invert
not
if-goto IF0
push local 0 //value of dx
pop local 2 //bind topmost stack value to temp
push local 1 //value of dy
pop local 0 //bind topmost stack value to dx
push local 2 //value of temp
pop local 1 //bind topmost stack value to dy
push this 1 //value of y
push argument 2 //value of desty
lt
pop this 8 //bind topmost stack value to positivex
push this 0 //value of x
push argument 1 //value of destx
lt
pop this 9 //bind topmost stack value to positivey
goto IF1
label IF0
push this 0 //value of x
push argument 1 //value of destx
lt
pop this 8 //bind topmost stack value to positivex
push this 1 //value of y
push argument 2 //value of desty
lt
pop this 9 //bind topmost stack value to positivey
label IF1
push constant 2 
push local 1 //value of dy
call Math.multiply 2
push local 0 //value of dx
sub
pop this 4 //bind topmost stack value to d
push constant 2 
push local 1 //value of dy
call Math.multiply 2
pop this 5 //bind topmost stack value to straightD
push constant 2 
push local 1 //value of dy
push local 0 //value of dx
sub
call Math.multiply 2
pop this 6 //bind topmost stack value to diagonalD
return
push constant 0 
function Ball.move 1
push argument 0 //arg 0 holds the pointer to the object
pop pointer 0 
call Ball.hide 0
pop temp 0 //remove return value from stack after do statement
push this 4 //value of d
push constant 0 
lt
not
if-goto IF2
push this 4 //value of d
push this 5 //value of straightD
add
pop this 4 //bind topmost stack value to d
goto IF3
label IF2
push this 4 //value of d
push this 6 //value of diagonalD
add
pop this 4 //bind topmost stack value to d
push this 9 //value of positivey
not
if-goto IF4
push this 7 //value of invert
not
if-goto IF6
push this 0 //value of x
push constant 4 
add
pop this 0 //bind topmost stack value to x
goto IF7
label IF6
push this 1 //value of y
push constant 4 
add
pop this 1 //bind topmost stack value to y
label IF7
goto IF5
label IF4
push this 7 //value of invert
not
if-goto IF8
push this 0 //value of x
push constant 4 
sub
pop this 0 //bind topmost stack value to x
goto IF9
label IF8
push this 1 //value of y
push constant 4 
sub
pop this 1 //bind topmost stack value to y
label IF9
label IF5
label IF3
push this 8 //value of positivex
not
if-goto IF10
push this 7 //value of invert
not
if-goto IF12
push this 1 //value of y
push constant 4 
add
pop this 1 //bind topmost stack value to y
goto IF13
label IF12
push this 0 //value of x
push constant 4 
add
pop this 0 //bind topmost stack value to x
label IF13
goto IF11
label IF10
push this 7 //value of invert
not
if-goto IF14
push this 1 //value of y
push constant 4 
sub
pop this 1 //bind topmost stack value to y
goto IF15
label IF14
push this 0 //value of x
push constant 4 
sub
pop this 0 //bind topmost stack value to x
label IF15
label IF11
push this 0 //value of x
push this 10 //value of leftWall
gt
not
not
if-goto IF16
push constant 1 
pop this 14 //bind topmost stack value to wall
push this 10 //value of leftWall
pop this 0 //bind topmost stack value to x
goto IF17
label IF16
label IF17
push this 0 //value of x
push this 11 //value of rightWall
lt
not
not
if-goto IF18
push constant 2 
pop this 14 //bind topmost stack value to wall
push this 11 //value of rightWall
pop this 0 //bind topmost stack value to x
goto IF19
label IF18
label IF19
push this 1 //value of y
push this 12 //value of topWall
gt
not
not
if-goto IF20
push constant 3 
pop this 14 //bind topmost stack value to wall
push this 12 //value of topWall
pop this 1 //bind topmost stack value to y
goto IF21
label IF20
label IF21
push this 1 //value of y
push this 13 //value of bottomWall
lt
not
not
if-goto IF22
push constant 4 
pop this 14 //bind topmost stack value to wall
push this 13 //value of bottomWall
pop this 1 //bind topmost stack value to y
goto IF23
label IF22
label IF23
call Ball.show 0
pop temp 0 //remove return value from stack after do statement
push this 14 //value of wall
return
function Ball.bounce 6
push argument 0 //arg 0 holds the pointer to the object
pop pointer 0 
push this 2 //value of lengthx
push constant 10 
call Math.divide 2
pop local 2 //bind topmost stack value to divLengthx
push this 3 //value of lengthy
push constant 10 
call Math.divide 2
pop local 3 //bind topmost stack value to divLengthy
push argument 1 //value of bouncingDirection
push constant 0 
eq
not
if-goto IF24
push constant 10 
pop local 4 //bind topmost stack value to factor
goto IF25
label IF24
push this 2 //value of lengthx
push constant 0 
lt
not
push argument 1 //value of bouncingDirection
push constant 1 
eq
and
push this 2 //value of lengthx
push constant 0 
lt
push argument 1 //value of bouncingDirection
push constant 1 
neg
eq
and
or
not
if-goto IF26
push constant 20 
pop local 4 //bind topmost stack value to factor
goto IF27
label IF26
push constant 5 
pop local 4 //bind topmost stack value to factor
label IF27
label IF25
push this 14 //value of wall
push constant 1 
eq
not
if-goto IF28
push constant 506 
pop local 0 //bind topmost stack value to newx
push local 3 //value of divLengthy
push constant 50 
neg
call Math.multiply 2
push local 2 //value of divLengthx
call Math.divide 2
pop local 1 //bind topmost stack value to newy
push this 1 //value of y
push local 1 //value of newy
push local 4 //value of factor
call Math.multiply 2
add
pop local 1 //bind topmost stack value to newy
goto IF29
label IF28
push this 14 //value of wall
push constant 2 
eq
not
if-goto IF30
push constant 0 
pop local 0 //bind topmost stack value to newx
push local 3 //value of divLengthy
push constant 50 
call Math.multiply 2
push local 2 //value of divLengthx
call Math.divide 2
pop local 1 //bind topmost stack value to newy
push this 1 //value of y
push local 1 //value of newy
push local 4 //value of factor
call Math.multiply 2
add
pop local 1 //bind topmost stack value to newy
goto IF31
label IF30
push this 14 //value of wall
push constant 3 
eq
not
if-goto IF32
push constant 250 
pop local 1 //bind topmost stack value to newy
push local 2 //value of divLengthx
push constant 25 
neg
call Math.multiply 2
push local 3 //value of divLengthy
call Math.divide 2
pop local 0 //bind topmost stack value to newx
push this 0 //value of x
push local 0 //value of newx
push local 4 //value of factor
call Math.multiply 2
add
pop local 0 //bind topmost stack value to newx
goto IF33
label IF32
push constant 0 
pop local 1 //bind topmost stack value to newy
push local 2 //value of divLengthx
push constant 25 
call Math.multiply 2
push local 3 //value of divLengthy
call Math.divide 2
pop local 0 //bind topmost stack value to newx
push this 0 //value of x
push local 0 //value of newx
push local 4 //value of factor
call Math.multiply 2
add
pop local 0 //bind topmost stack value to newx
label IF33
label IF31
label IF29
push local 0 //value of newx
push local 1 //value of newy
call Ball.setDestination 2
pop temp 0 //remove return value from stack after do statement
return
push constant 0 
